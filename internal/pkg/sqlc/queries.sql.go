// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package sqlc

import (
	"context"
)

const createSchool = `-- name: CreateSchool :exec
INSERT INTO schools (name, type, logo) VALUES ($1, $2, $3) RETURNING id
`

type CreateSchoolParams struct {
	Name string
	Type string
	Logo string
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) error {
	_, err := q.db.ExecContext(ctx, createSchool, arg.Name, arg.Type, arg.Logo)
	return err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM schools WHERE id = $1
`

func (q *Queries) DeleteSchool(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, id)
	return err
}

const getSchool = `-- name: GetSchool :one
SELECT id, name, type, logo, createdat, updatedat FROM schools WHERE id = $1
`

func (q *Queries) GetSchool(ctx context.Context, id int32) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchool, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Logo,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getSchools = `-- name: GetSchools :many
SELECT id, name, type, logo, createdat, updatedat FROM schools
`

func (q *Queries) GetSchools(ctx context.Context) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getSchools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []School
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Logo,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchool = `-- name: UpdateSchool :exec
UPDATE schools SET name = $1, type = $2, logo = $3, updatedAt = now() WHERE id = $4
`

type UpdateSchoolParams struct {
	Name string
	Type string
	Logo string
	ID   int32
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) error {
	_, err := q.db.ExecContext(ctx, updateSchool,
		arg.Name,
		arg.Type,
		arg.Logo,
		arg.ID,
	)
	return err
}
